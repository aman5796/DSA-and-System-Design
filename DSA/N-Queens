class Solution {
public:
    vector<vector<string>> ans;
    vector<vector<string>> solveNQueens(int n) {
        vector<string> board(n,string(n,'.'));
        placeQueen(board,0,n);
        return ans;
    }

    void placeQueen(vector<string> &board, int r, int n) {
        if(r == n) {
            ans.push_back(board);
            return;
        }
        for(int i=0;i<n;i++) {
            if(isSafe(board,r,i,n)) {
                board[r][i] = 'Q';
                placeQueen(board,r+1,n);
                board[r][i] = '.';
            }
        }
    }
    
    bool isSafe(vector<string> &board, int r, int c, int n) {
        for(int i=0;i<n;i++) {
            if(board[i][c] == 'Q') return false;
		    if(r - i >= 0 && c - i >= 0 && board[r - i][c - i] == 'Q') return false;
		    if(r - i >= 0 && c + i <  n && board[r - i][c + i] == 'Q') return false;
        }
        return true;
    }
};