class Solution {
public:
    int n,m;
    vector<int> dirRow={-1,1,0,0};
    vector<int> dirCol={0,0,1,-1};
    
    void dfs(int row,int col,vector<vector<int>>& visited,vector<vector<char>>& board)
    {
        visited[row][col]=1;
        for(int i=0;i<4;i++)
        {
            int newRow=row+dirRow[i];
            int newCol=col+dirCol[i];
            if((newRow>=0 && newRow<n)&& (newCol>=0 && newCol<m)&& !visited[newRow][newCol]
                && board[newRow][newCol]=='O')
                {
                    dfs(newRow,newCol,visited,board);
                }
        }
    }

    void solve(vector<vector<char>>& board) {
        n=board.size();
        m=board[0].size();
        vector<vector<int>> visited(n,vector<int>(m,0));
        for(int j=0;j<m;j++)
        {
            if(!visited[0][j] && board[0][j]=='O')
            dfs(0,j,visited,board);
            if(!visited[n-1][j] && board[n-1][j]=='O')
            dfs(n-1,j,visited,board);
        }
        for(int i=0;i<n;i++)
        {
            if(!visited[i][0] && board[i][0]=='O')
            dfs(i,0,visited,board);
            if(!visited[i][m-1] && board[i][m-1]=='O')
            dfs(i,m-1,visited,board);
        }
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(!visited[i][j] && board[i][j]=='O')
                board[i][j]='X';
            }
        }
    }
};