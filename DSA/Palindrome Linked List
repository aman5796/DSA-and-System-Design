/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(head==NULL) return false;
        ListNode* mid = getMid(head);
        ListNode* rev = reverseHead(mid->next);
        mid->next = NULL;
        while(rev) {
            if(head->val!=rev->val) {
                return false;
            }
            head = head->next;
            rev = rev->next;
        }
        return true;
    }

    ListNode* getMid(ListNode* head) {
        if(head==NULL) return NULL;
        ListNode* slowPtr = head;
        ListNode* fastPtr = head->next;
        while(fastPtr && fastPtr->next) {
            slowPtr = slowPtr->next;
            fastPtr = fastPtr->next->next;
        }
        return slowPtr;
    }

    ListNode* reverseHead(ListNode* head) {
        if(head == NULL)  return head;
        ListNode* prev = NULL;
        ListNode* curr = head;
        while(curr) {
            ListNode* next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
};