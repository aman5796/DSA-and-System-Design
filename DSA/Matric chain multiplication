class Solution{
public:

    int minOps(int arr[], int i, int j, vector<vector<int>> &dp) {
        if(i==j) {
            return 0;
        }
        if(dp[i][j]!=-1) return dp[i][j];
        int ans = INT_MAX;
        for(int k=i;k<j;k++) {
            int ops = (arr[i-1]*arr[k]*arr[j]) + minOps(arr,i,k,dp) + minOps(arr,k+1,j,dp);
            ans = min(ans,ops);
        }
        return dp[i][j] = ans;
    }
    
    int matrixMultiplication(int n, int arr[])
    {
        vector<vector<int>> dp(n,vector<int>(n,-1));
        return minOps(arr,1,n-1,dp);
    }
};


///////////////////////////////////TABULATION////////////////////////////////////

int matrixMultiplication(int n, int arr[])
    {
        vector<vector<int>> dp(n,vector<int>(n,0));
        for(int i=0;i<n;i++) {
            dp[i][i] = 0;
        }
        for (int len = 2; len < n; len++) {
            for (int i = 1; i < n-len+1; i++) {
                int j = i + len - 1;
                dp[i][j] = INT_MAX;
                for (int k = i; k < j; k++) {
                    int cost = dp[i][k] + dp[k + 1][j] + arr[i - 1] * arr[k] * arr[j];
                    dp[i][j] = min(dp[i][j], cost);
                }
            }
        }
        return dp[1][n-1];
        // return minOps(arr,1,n-1,dp);
    }