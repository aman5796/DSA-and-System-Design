class Solution {
public:
    int reversePairs(vector<int>& nums) {
        return mergeSort(nums,0,nums.size()-1);
    }

    int mergeSort(vector<int>& arr, int l, int r)
    {
        int cnt = 0;
        if(l<r) {
            int mid = (l+r)/2;
            cnt += mergeSort(arr,l,mid);
            cnt += mergeSort(arr,mid+1,r);
            cnt += merge(arr,l,mid,r);
        }
        return cnt;
    }

    int merge(vector<int> &arr, int l, int m, int r) {
        vector<int> temp;
        int i1 = l;
        int i2 = m+1;
        int cnt = 0;
        int right = m+1;
        for(int i=l;i<=m;i++) {
            while(right<=r && arr[i]>2LL*arr[right]){
                right++;
            }
            cnt += (right-(m+1));
        }
        while(i1<=m && i2<=r) {
            if(arr[i1]<=arr[i2]) {
                temp.push_back(arr[i1++]);
            }
            else {
                temp.push_back(arr[i2++]);
            }
        }
        while(i1<=m) {
            temp.push_back(arr[i1++]);
        }
        while(i2<=r) {
            temp.push_back(arr[i2++]);
        }
        for(int i=l;i<=r;i++) {
            arr[i] = temp[i-l];
        }
        return cnt;
    }
};