class Solution {
public:
    int longestPalindromeSubseq(string s) {
        int n = s.length();
        if(n==1) return 1;
        vector<vector<int>> dp(n,vector<int>(n,0));
         for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }

        for (int len = 2; len <= n; len++) {
            for (int i = 0; i < n - len + 1; i++) {
                int j = i + len - 1;
                if (s[i] == s[j] && len == 2) {
                    dp[i][j] = 2;
                } else if (s[i] == s[j]) {
                    dp[i][j] = 2 + dp[i + 1][j - 1];
                } else {
                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]);
                }
            }
        }

        return dp[0][n - 1];
        // return LPS(s,0,n-1,dp);
    }

    int LPS(string s, int i, int j, vector<vector<int>> &dp) {
        if(i>j) {
            return 0;
        }
        if(i==j) return 1;
        if(dp[i][j]!=-1) return dp[i][j];
        int match = 0;
        int notMatch = 0;
        if(s[i]==s[j]) {
            match = 2 + LPS(s,i+1,j-1,dp);
        }
        else {
            notMatch = max(LPS(s,i+1,j,dp),LPS(s,i,j-1,dp));
        }
        dp[i][j] = max(match,notMatch);
        return dp[i][j];
    }
};