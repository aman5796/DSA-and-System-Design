class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        priority_queue<pair<int,int>> pq;
        vector<int> res;
        for(int i=0;i<nums.size();i++) {
            if(i<k) {
                pq.push({nums[i],i});
                if(i==k-1) {
                    res.push_back(pq.top().first);
                }
            }
            else {
                pq.push({nums[i],i});
                while(pq.top().second<=i-k) {
                    pq.pop();
                }
                res.push_back(pq.top().first);
            }
        }
        return res;
    }
};

/////////////////////DEQUE SOLUTION/////////////////////////////////////
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        deque<int> dq;
        vector<int> res;
        for(int i=0;i<nums.size();i++) {
            if (!dq.empty() && dq.front() == i - k)
            {
                dq.pop_front();
            }
            while (!dq.empty() && nums[dq.back()] < nums[i]) {
                dq.pop_back();
            }
            dq.push_back(i);
            if (i >= k - 1) res.push_back(nums[dq.front()]);
        }
        return res;
    }
};