class Solution {
public:
    int minCost(int n, vector<int>& cuts) {
        int c = cuts.size();
        cuts.push_back(n);
        cuts.insert(cuts.begin(), 0);
        sort(cuts.begin(),cuts.end());
        vector<vector<int>> dp(c+1,vector<int>(c+1,-1));
        return cost(cuts,n,1,c,dp);
    }

    int cost(vector<int> &arr, int n, int i, int j, vector<vector<int>> &dp) {
        if(i>j) {
            return 0;
        }
        if(dp[i][j]!=-1) return dp[i][j];
        int ans = INT_MAX;
        for(int k=i;k<=j;k++) {
            int _cost = cost(arr,n,i,k-1,dp)+cost(arr,n,k+1,j,dp)+arr[j+1]-arr[i-1];
            ans = min(ans,_cost);
        }
        return dp[i][j] = ans;
    }
};