class Solution {
public:
    int maxCoins(vector<int>& nums) {
        int n = nums.size();
        nums.push_back(1);
        nums.insert(nums.begin(),1);
        vector<vector<int>> dp(n+2,vector<int>(n+2,-1));
        return cost(nums,1,n,dp);
    }

    int cost(vector<int> &nums, int i, int j, vector<vector<int>> &dp) {
        if(i>j) {
            return 0;
        }
        if(dp[i][j]!=-1) return dp[i][j];
        int ans = INT_MIN;
        for(int k=i;k<=j;k++) {
            int _cost = (nums[k]*nums[i-1]*nums[j+1]) + cost(nums,i,k-1,dp) + cost(nums,k+1,j,dp);
            ans = max(_cost,ans);
        }
        return dp[i][j] = ans;
    }
};

///////////////////////////TABULATION//////////////////////////////////////

int maxCoins(vector<int>& nums) {
        int n = nums.size();
        nums.push_back(1);
        nums.insert(nums.begin(),1);
        vector<vector<int>> dp(n+2,vector<int>(n+2,0));
        for (int i = n; i >= 1; i--) {
            for (int j = 1; j <= n; j++) {
                if (i > j) continue;
                int maxi = INT_MIN;
                for (int k = i; k <= j; k++) {
                    int _cost = (nums[i-1]*nums[k]*nums[j+1]) + dp[i][k-1] + dp[k+1][j];
                    maxi = max(maxi, _cost);
                }
                dp[i][j] = maxi;
            }
        }
        
        return dp[1][n];
        // return cost(nums,1,n,dp);
    }