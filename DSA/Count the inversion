class Solution{
  public:
    // arr[]: Input Array
    // N : Size of the Array arr[]
    // Function to count inversions in the array.
    long long int merge(long long arr[], long long left, long long mid, long long right) 
{
    long long l = left;
    long long r = mid+1;
    long long cnt = 0;
    vector<long long> temp;
    while (l <= mid && r <= right) {
        if (arr[l] <= arr[r]) {
            temp.push_back(arr[l]);
            l++;
        }
        else {
            temp.push_back(arr[r]);
            cnt += (mid - l + 1);
            r++;
        }
    }
    while (l <= mid) {
        temp.push_back(arr[l]);
        l++;
    }
    while (r <= right) {
        temp.push_back(arr[r]);
        r++;
    }
    for (long long j=left;j<=right;j++) {
        arr[j] = temp[j-left];
    }
    return cnt;
}

long long int mergeSort(long long arr[], long long left, long long right)
{
    long long int cnt = 0;
    if (left>=right) return cnt;
    long long mid = (left+right)/2;
    cnt += mergeSort(arr,left,mid);
    cnt += mergeSort(arr,mid+1,right);
    cnt += merge(arr,left,mid,right);
    return cnt;
}


long long int inversionCount(long long arr[], long long N)
{
    // Your Code Here
    return mergeSort(arr,0,N-1);
}

};