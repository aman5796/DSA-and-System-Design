class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        vector<vector<int>> graph[n+1];
        for(int i=0;i<times.size();i++) {
            graph[times[i][0]].push_back({times[i][1],times[i][2]});
        }
        vector<int> dis(n+1,INT_MAX);
        vector<bool> vis(n+1,false);
        dis[0] = INT_MIN;
        dis[k] = 0;
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
        pq.push({0,k});
        while(!pq.empty()) {
            pair<int,int> top = pq.top();
            pq.pop();
            int node = top.second;
            int wt = top.first;
            if(!vis[node]) {
                vis[node] = true;
            }
            else {
                continue;
            }
            for(int i=0;i<graph[node].size();i++) {
                if(dis[graph[node][i][0]]>=wt+graph[node][i][1]) {
                    dis[graph[node][i][0]] = wt+graph[node][i][1];
                    pq.push({wt+graph[node][i][1],graph[node][i][0]});
                }
            }
        }
        int ans = INT_MIN;
        for(int i=1;i<=n;i++) {
            ans = max(ans,dis[i]);
        }
        return ans==INT_MAX?-1:ans;
    }
};