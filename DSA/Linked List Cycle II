/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        if(head==NULL) return NULL;
        ListNode* slowPtr = head;
        ListNode* fastPtr = head;
        bool isCycle = false;
        while(fastPtr && fastPtr->next) {
            slowPtr = slowPtr->next;
            fastPtr = fastPtr->next->next;
            if(slowPtr==fastPtr) {
                isCycle = true;
                break;
            }
        }
        if(isCycle) {
            slowPtr = head;
            while(fastPtr && fastPtr->next && slowPtr!=fastPtr) {
                slowPtr = slowPtr->next;
                fastPtr = fastPtr->next;
            }
            return slowPtr;
        }
        return NULL;
    }
};