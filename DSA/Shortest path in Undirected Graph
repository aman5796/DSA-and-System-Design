class Solution {
  public:
    vector<int> shortestPath(vector<vector<int>>& edges, int N,int M, int src){
        vector<int> graph[N]; 
        for(auto it : edges) {
            graph[it[0]].push_back(it[1]); 
            graph[it[1]].push_back(it[0]); 
        }
        vector<int> dis(N,INT_MAX);
        dis[src] = 0;
        queue<pair<int,int>> q;
        q.push({src,0});
        while(!q.empty()) {
            pair<int,int> top = q.front();
            q.pop();
            for(int node: graph[top.first]) {
                if(dis[node]>=top.second+1) {
                    dis[node] = top.second+1;
                    q.push({node,top.second+1});
                }
            }
        }
        for(int i=0;i<N;i++) {
            if(dis[i]==INT_MAX) {
                dis[i] = -1;
            }
        }
        return dis;
    }
};