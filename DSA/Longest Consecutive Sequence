class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        if(nums.size()==0) return 0;
        unordered_map<int,int> hashMap;
        for(int num: nums) {
            if(hashMap.find(num)!=hashMap.end()) {
                continue;
            }
            hashMap[num] = 1;
            if(hashMap.find(num-1)!=hashMap.end()) {
                hashMap[num] += hashMap[num-1];
            }
            if(hashMap.find(num+1)!=hashMap.end()) {
                hashMap[num] += hashMap[num+1];
            }
            if(hashMap.find(num-1)!=hashMap.end()) {
                hashMap[num-hashMap[num-1]] = hashMap[num];
            }
            if(hashMap.find(num+1)!=hashMap.end()) {
                hashMap[num+hashMap[num+1]] = hashMap[num];
            }
        }
        int maxLength = 1;
        for(auto it=hashMap.begin();it!=hashMap.end();it++) {
            maxLength = max(maxLength,it->second);
        }
        return maxLength;
    }
};