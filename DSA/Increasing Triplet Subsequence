class Solution {
public:
    bool increasingTriplet(vector<int>& nums) {
        int n = nums.size();
        // vector<vector<int>> dp(n+1,vector<int>(n+1,0));
        // int lis = LIS(nums,0,-1,dp);
        // return (lis>=3);

        // for(int i=n-1;i>=0;i--) {
        //     for(int j=i-1;j>=-1;j--) {
        //         int include = INT_MIN;
        //         int exclude = dp[i+1][j+1];
        //         if(j==-1 || nums[i]>nums[j]) {
        //             include = 1+dp[i+1][i+1];
        //         }
        //         dp[i][j+1] = max(include,exclude);
        //     }
        // }
        // return (dp[0][0]>=3);

        vector<int> dp;
        for(int num: nums) {
            auto lb = lower_bound(dp.begin(),dp.end(),num);
            if(lb == dp.end()) {
                dp.push_back(num);
            }
            else {
                *lb = num;
            }
        }
        return dp.size()>=3;
    }

    int LIS(vector<int>&nums, int indx, int prevIndx, vector<vector<int>> &dp) {
        if(indx>=nums.size()) {
            return 0;
        }
        if(dp[indx][prevIndx+1]!=-1) {
            return dp[indx][prevIndx+1];
        }
        int include = INT_MIN;
        if(prevIndx==-1 || nums[indx]>nums[prevIndx]) {
            include = 1+LIS(nums,indx+1,indx,dp);
        }
        int exclude = LIS(nums,indx+1,prevIndx,dp);
        return dp[indx][prevIndx+1] = max(include,exclude);
    }
};