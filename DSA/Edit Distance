class Solution {
public:
    int minDistance(string s1, string s2) {
        int n = s1.length();
        int m = s2.length();
        vector<vector<int>> dp(n,vector<int>(m,-1));
        return minOps(s1,s2,n-1,m-1,dp);
    }

    int minOps(string s1, string s2, int i1, int i2, vector<vector<int>> &dp) {
        if(i1<0) {
            return i2+1;
        }
        if(i2<0) {
            return i1+1;
        }
        if(dp[i1][i2]!=-1) return dp[i1][i2];
        if(s1[i1]==s2[i2]) {
            return dp[i1][i2] = minOps(s1,s2,i1-1,i2-1,dp);
        }
        else {
            return dp[i1][i2] = 1+min({minOps(s1,s2,i1-1,i2-1,dp),minOps(s1,s2,i1-1,i2,dp),minOps(s1,s2,i1,i2-1,dp)});
        }
        return 0;
    }
};


///////////////////////////////TABULATION////////////////////////////////////

class Solution {
public:
    int minDistance(string s1, string s2) {
        int n = s1.length();
        int m = s2.length();
        vector<vector<int>> dp(n+1,vector<int>(m+1,0));
        for(int i=0;i<=n;i++) {
            dp[i][0] = i;
        }
        for(int j=0;j<=m;j++) {
            dp[0][j] = j;
        }
        for(int i1=1;i1<=n;i1++) {
            for(int i2=1;i2<=m;i2++) {
                if(s1[i1-1]==s2[i2-1]) {
                    dp[i1][i2] = dp[i1-1][i2-1];
                }
                else {
                    dp[i1][i2] = 1+min({dp[i1-1][i2-1],dp[i1-1][i2],dp[i1][i2-1]});
                }
            }
        }
        return dp[n][m];
        // return minOps(s1,s2,n-1,m-1,dp);
    }