////////////////////////// Memoized Solution //////////////////////
class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> arr(m,vector<int>(n,-1));
        return pathCount(0,0,m,n,arr);
    }

    int pathCount(int a, int b, int m, int n, vector<vector<int>>& arr) {
        if(a==m-1 && b==n-1) {
            return 1;
        }
        if(a>=m || b>=n) {
            return 0;
        }
        if(arr[a][b]!=-1) return arr[a][b];
        arr[a][b] = pathCount(a+1,b,m,n,arr) + pathCount(a,b+1,m,n,arr);
        return arr[a][b];
    }
};

////////////////////////// Tabularized Solution //////////////////////
class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> arr(m,vector<int>(n,0));
        arr[m-1][n-1] = 1;
        for(int i=m-1;i>=0;i--) {
            for(int j=n-1;j>=0;j--) {
                if(i<m && j+1<n) {
                    arr[i][j] += arr[i][j+1];
                }
                if(i+1<m && j<n) {
                    arr[i][j] += arr[i+1][j];
                }
            }
        }
        return arr[0][0];
    }
};