class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        vector<int> dis(n,INT_MAX);
        queue<vector<int>> q;
        vector<vector<int>> graph[n];
        for(int i=0;i<flights.size();i++) {
            graph[flights[i][0]].push_back({flights[i][1],flights[i][2]});
        }
        dis[src] = 0;
        q.push({-1,src,0});
        while(!q.empty()) {
            vector<int> v = q.front();
            q.pop();
            int node = v[1];
            int wt = v[2];
            int hop = v[0];
            for(int i=0;i<graph[node].size();i++) {
                if(hop+1<=k && dis[graph[node][i][0]]>=wt+graph[node][i][1]) {
                    dis[graph[node][i][0]] = wt+graph[node][i][1];
                    q.push({hop+1,graph[node][i][0],wt+graph[node][i][1]});
                }
            }
        }
        return dis[dst]==INT_MAX?-1:dis[dst];
    }
};